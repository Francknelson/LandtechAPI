require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/recruiter/submissions", type: :request do
  let(:valid_attributes) { attributes_for(:submission, job_id: create(:job).id) }

  let(:invalid_attributes) { attributes_for(:submission, job_id: nil) }

  let(:token) { JsonWebToken.encode(recruiter_id: create(:recruiter).id) }

  let(:valid_headers) {
    {
      'Authorization' => token,
      'Content-Type' => "application/json"
    }
  }

  describe "GET /index" do
    it "renders a successful response" do
      Submission.create! valid_attributes
      get recruiter_submissions_path, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      submission = Submission.create! valid_attributes
      get recruiter_submission_path(submission), as: :json
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Recruiter::Submission" do
        expect {
          post recruiter_submissions_path,
               params: { recruiter_submission: valid_attributes }, headers: valid_headers, as: :json
        }.to change(Submission, :count).by(1)
      end

      it "renders a JSON response with the new recruiter_submission" do
        post recruiter_submissions_path,
             params: { recruiter_submission: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(/application\/json/)
      end
    end

    context "with invalid parameters" do
      it "does not create a new Recruiter::Submission" do
        expect {
          post recruiter_submissions_path,
               params: { recruiter_submission: invalid_attributes }, as: :json
        }.to change(Submission, :count).by(0)
      end

      it "renders a JSON response with errors for the new recruiter_submission" do
        post recruiter_submissions_path,
             params: { recruiter_submission: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(/application\/json/)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        { name: "New Name" }
      }

      it "updates the requested recruiter_submission" do
        submission = Submission.create! valid_attributes
        patch recruiter_submission_path(submission),
              params: { recruiter_submission: new_attributes }, headers: valid_headers, as: :json
        submission.reload
        skip("Add assertions for updated state")
      end

      it "renders a JSON response with the recruiter_submission" do
        submission = Submission.create! valid_attributes
        patch recruiter_submission_path(submission),
              params: { recruiter_submission: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(/application\/json/)
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the recruiter_submission" do
        submission = Submission.create! valid_attributes
        patch recruiter_submission_path(submission),
              params: { recruiter_submission: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(/application\/json/)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested recruiter_submission" do
      submission = Submission.create! valid_attributes
      expect {
        delete recruiter_submission_path(submission), headers: valid_headers, as: :json
      }.to change(Submission, :count).by(-1)
    end
  end
end
